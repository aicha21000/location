const mongoose = require('mongoose');
const Reservation = require('../models/Reservation');
const Service = require('../models/Service');
const config = require('./config');

async function testMovingOptions() {
  try {
    // Connexion √† la base de donn√©es
    await mongoose.connect(config.mongoURI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Cr√©er un service de d√©m√©nagement de test
    const testService = new Service({
      name: 'Service de D√©m√©nagement Complet',
      category: 'demenagement',
      type: 'service',
      description: 'Service complet incluant emballage, transport et d√©ballage',
      price: 500, // 500‚Ç¨/jour
      unit: 'jour',
      availability: {
        isAvailable: true,
        stock: 5
      },
      location: {
        address: '123 Test Street',
        city: 'Test City',
        postalCode: '12345'
      }
    });

    await testService.save();
    console.log('‚úÖ Service de d√©m√©nagement cr√©√©');

    // Test avec toutes les options activ√©es
    const testReservation = new Reservation({
      user: new mongoose.Types.ObjectId(), // ID fictif pour le test
      service: testService._id,
      startDate: new Date('2024-01-15'),
      endDate: new Date('2024-01-16'), // 1 jour
      pickupLocation: {
        address: '123 Test Street',
        city: 'Test City',
        postalCode: '12345'
      },
      returnLocation: {
        address: '123 Test Street',
        city: 'Test City',
        postalCode: '12345'
      },
      pricing: {
        dailyRate: 500, // 500‚Ç¨/jour
        totalDays: 1,
        subtotal: 500, // 1 * 500‚Ç¨
        optionsPrice: 0,
        deposit: 0,
        totalAmount: 500,
        discount: 0
      },
             options: {
         insurance: true, // 50‚Ç¨ fixe
         packing: true, // 200‚Ç¨ fixe
         unpacking: true, // 150‚Ç¨ fixe
         furniture: true, // 100‚Ç¨ fixe
         delivery: true, // 80‚Ç¨ fixe
         setup: true, // 120‚Ç¨ fixe
         movingKit: true // 75‚Ç¨ fixe (kit physique)
       },
       movingKitDelivery: {
         date: new Date('2024-01-14'),
         time: '14:00',
         address: '123 Kit Delivery Street',
         city: 'Test City',
         postalCode: '12345',
         instructions: 'Livrer √† l\'entr√©e principale'
       },
      payment: {
        method: 'stripe',
        status: 'pending'
      }
    });

    // Sauvegarder la r√©servation (le middleware va recalculer les prix)
    await testReservation.save();

    console.log('\nüìä Test complet des options de d√©m√©nagement :');
    console.log('===============================================');
    console.log(`Service : ${testService.name}`);
    console.log(`Cat√©gorie : ${testService.category}`);
    console.log(`Prix de base : ${testService.price}‚Ç¨/jour`);
    console.log(`Dur√©e : ${testReservation.pricing.totalDays} jour`);
    console.log(`Prix de base total : ${testReservation.pricing.subtotal}‚Ç¨`);
    console.log(`Prix des options : ${testReservation.pricing.optionsPrice}‚Ç¨`);
    console.log(`Total : ${testReservation.pricing.totalAmount}‚Ç¨`);
    
    console.log('\nüîç D√©tail des options activ√©es :');
    console.log('=================================');
    console.log(`‚úÖ Assurance d√©m√©nagement (50‚Ç¨) : ${testReservation.options.insurance ? 'Oui' : 'Non'}`);
    console.log(`‚úÖ Emballage (200‚Ç¨) : ${testReservation.options.packing ? 'Oui' : 'Non'}`);
    console.log(`‚úÖ D√©ballage (150‚Ç¨) : ${testReservation.options.unpacking ? 'Oui' : 'Non'}`);
    console.log(`‚úÖ D√©montage meubles (100‚Ç¨) : ${testReservation.options.furniture ? 'Oui' : 'Non'}`);
         console.log(`‚úÖ Livraison √† domicile (80‚Ç¨) : ${testReservation.options.delivery ? 'Oui' : 'Non'}`);
     console.log(`‚úÖ Installation meubles (120‚Ç¨) : ${testReservation.options.setup ? 'Oui' : 'Non'}`);
     console.log(`‚úÖ Kit de d√©m√©nagement (75‚Ç¨) : ${testReservation.options.movingKit ? 'Oui' : 'Non'}`);
     if (testReservation.options.movingKit && testReservation.movingKitDelivery) {
       console.log(`  üì¶ Date de livraison : ${testReservation.movingKitDelivery.date.toLocaleDateString()}`);
       console.log(`  üì¶ Adresse : ${testReservation.movingKitDelivery.address}, ${testReservation.movingKitDelivery.city} ${testReservation.movingKitDelivery.postalCode}`);
     }

         // Calcul manuel pour v√©rification
     const expectedOptionsPrice = 
       (testReservation.options.insurance ? 50 : 0) +
       (testReservation.options.packing ? 200 : 0) +
       (testReservation.options.unpacking ? 150 : 0) +
       (testReservation.options.furniture ? 100 : 0) +
       (testReservation.options.delivery ? 80 : 0) +
       (testReservation.options.setup ? 120 : 0) +
       (testReservation.options.movingKit ? 75 : 0);

    const expectedTotal = testReservation.pricing.subtotal + expectedOptionsPrice;

    console.log('\n‚úÖ V√©rification du calcul :');
    console.log('===========================');
    console.log(`Prix des options attendu : ${expectedOptionsPrice}‚Ç¨`);
    console.log(`Total attendu : ${expectedTotal}‚Ç¨`);
    console.log(`Prix des options calcul√© : ${testReservation.pricing.optionsPrice}‚Ç¨`);
    console.log(`Total calcul√© : ${testReservation.pricing.totalAmount}‚Ç¨`);
    
    if (testReservation.pricing.optionsPrice === expectedOptionsPrice && 
        testReservation.pricing.totalAmount === expectedTotal) {
      console.log('\nüéâ SUCC√àS : Toutes les options de d√©m√©nagement sont correctement calcul√©es !');
      console.log(`üí∞ Prix total avec toutes les options : ${testReservation.pricing.totalAmount}‚Ç¨`);
    } else {
      console.log('\n‚ùå ERREUR : Le calcul des options ne correspond pas aux attentes !');
    }

    // Nettoyer la base de donn√©es
    await Reservation.findByIdAndDelete(testReservation._id);
    await Service.findByIdAndDelete(testService._id);
    console.log('\nüßπ Donn√©es de test supprim√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors du test :', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le test
testMovingOptions();
